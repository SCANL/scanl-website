@inproceedings{2018:IWOR:RENAME,
 abstract = {Renaming is vital to software maintenance and evolution. Developers rename entities when their original names no longer fit their behavioral role within the program. This may happen if the entity's original name was of poor quality or if the system has evolved such that the original name needs to be updated to reflect some of this evolution. In the end, the reason for the rename ultimately falls under increasing understandability and comprehension. Because comprehension is so important, and identifiers are the primary way developers comprehend code, it is critical to understand empirically how and why identifier names evolve. Armed with an understanding of these two facets of identifier evolution, researchers will be able to train algorithms to recognize, recommend, or even automatically generate high-quality identifier names. We present an empirical study of how method, class and package identifier names evolve to better understand the motives of their evolution. The empirical validation involves a set of 524,113 rename refactorings, performed on 3,795 Java systems. In a nutshell, our findings demonstrate that most rename refactorings narrow the meaning of the identifiers for which they are applied. Further, we analyze commit messages to contextualize these renames.},
 address = {New York, NY, USA},
 author = {Peruma, Anthony and Mkaouer, Mohamed Wiem and Decker, Michael J. and Newman, Christian D.},
 booktitle = {Proceedings of the 2nd International Workshop on Refactoring},
 doi = {10.1145/3242163.3242169},
 isbn = {9781450359740},
 keywords = {Program comprehension, Rename refactoring, natural language processing, Refactoring},
 location = {Montpellier, France},
 numpages = {8},
 pages = {26â€“33},
 publisher = {Association for Computing Machinery},
 series = {IWoR 2018},
 title = {An Empirical Investigation of How and Why Developers Rename Identifiers},
 url = {https://doi.org/10.1145/3242163.3242169},
 year = {2018}
}

